import React, { useState } from 'react';
import {
    View,
    Text,
    StyleSheet,
    Image,
    TouchableOpacity,
    FlatList,
    Pressable,
    TouchableHighlight
} from 'react-native';

const AddonScreen = ({ navigation }) => {
    const [selectedAddons, setSelectedAddons] = useState({});
    const [expandedCategories, setExpandedCategories] = useState({});

    const addonCategories = [
      {
        category: 'Sides',
        items: [
          { id: 1, name: 'French Fries', price: 2.99, image: { uri: 'https://picsum.photos/100?random=1' } },
          { id: 2, name: 'Coleslaw', price: 1.99, image: { uri: 'https://picsum.photos/100?random=2' } },
          { id: 3, name: 'Corn', price: 2.49, image: { uri: 'https://picsum.photos/100?random=3' } },
          { id: 7, name: 'Mashed Potatoes', price: 2.79, image: { uri: 'https://picsum.photos/100?random=4' } },
          { id: 8, name: 'Mac and Cheese', price: 3.29, image: { uri: 'https://picsum.photos/100?random=5' } },
          { id: 9, name: 'Onion Rings', price: 2.99, image: { uri: 'https://picsum.photos/100?random=6' } }
        ]
      },
      {
        category: 'Drinks',
        items: [
          { id: 4, name: 'Coca Cola', price: 1.99, image: { uri: 'https://picsum.photos/100?random=7' } },
          { id: 5, name: 'Sprite', price: 1.99, image: { uri: 'https://picsum.photos/100?random=8' } },
          { id: 6, name: 'Water', price: 1.49, image: { uri: 'https://picsum.photos/100?random=9' } },
          { id: 10, name: 'Fanta', price: 1.99, image: { uri: 'https://picsum.photos/100?random=10' } },
          { id: 11, name: 'Iced Tea', price: 1.79, image: { uri: 'https://picsum.photos/100?random=11' } },
          { id: 12, name: 'Lemonade', price: 2.29, image: { uri: 'https://picsum.photos/100?random=12' } }
        ]
      }
    ];
    
    

    const toggleAddon = (item) => {
        setSelectedAddons(prev => {
            const newSelectedAddons = { ...prev };
            if (newSelectedAddons[item.id]) {
                delete newSelectedAddons[item.id];
            } else {
                newSelectedAddons[item.id] = item;
            }
            return newSelectedAddons;
        });
    };

    const toggleCategoryExpansion = (category) => {
        setExpandedCategories(prev => ({
            ...prev,
            [category]: !prev[category]
        }));
    };

    const renderAddonItem = (item) => (
        <TouchableOpacity
            key={`addon-${item.id}`}
            style={[
                styles.addonItem,
                selectedAddons[item.id] && styles.selectedAddon
            ]}
            onPress={() => toggleAddon(item)}
        >
            <Image source={item.image} style={styles.addonImage} />
            <Text style={styles.addonName}>{item.name}</Text>
            <Text style={styles.addonPrice}>${item.price.toFixed(2)}</Text>
        </TouchableOpacity>
    );

    const renderAddonCategory = ({ item: category }) => {
        const isExpanded = expandedCategories[category.category];
        const displayItems = isExpanded ? category.items : category.items.slice(0, 3);

        return (
            <View key={category.category} style={styles.categoryContainer}>
                <Text style={styles.categoryTitle}>{category.category}</Text>
                <View style={styles.addonGridContainer}>
                    {displayItems.map((item) => renderAddonItem(item))}
                </View>
                
                {category.items.length > 3 && (
                    <Pressable onPress={() => toggleCategoryExpansion(category.category)}>
                        <Text style={styles.viewAllText}>
                            {isExpanded ? 'Show Less' : 'View All'}
                        </Text>
                    </Pressable>
                )}
            </View>
        );
    };

    const handleDone = () => {
        navigation.goBack();
    };

    return (
        <View style={styles.container}>
            <FlatList
                data={addonCategories}
                keyExtractor={(item) => item.category}
                renderItem={renderAddonCategory}
                contentContainerStyle={styles.listContainer}
            />
            <TouchableHighlight 
                style={styles.doneButton} 
                underlayColor="#FF5733"
                onPress={handleDone}
            >
                <Text style={styles.doneButtonText}>Done</Text>
            </TouchableHighlight>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f5f5f5',
        paddingVertical: 50,
        paddingHorizontal: 15
    },
    listContainer: {
        paddingBottom: 100
    },
    categoryContainer: {
        marginVertical: 10
    },
    categoryTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        marginHorizontal: 15,
        marginBottom: 10
    },
    addonGridContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'flex-start',
        paddingHorizontal: 15
    },
    addonItem: {
        width: '30%',
        alignItems: 'center',
        padding: 10,
        margin: 5,
        borderWidth: 1,
        borderColor: '#e0e0e0',
        borderRadius: 10,
        backgroundColor: 'white'
    },
    selectedAddon: {
        borderColor: '#FF6B6B',
        backgroundColor: '#FFF5F5'
    },
    addonImage: {
        width: 80,
        height: 80,
        resizeMode: 'contain'
    },
    addonName: {
        marginTop: 5,
        fontSize: 14,
        fontWeight: '500',
        textAlign: 'center'
    },
    addonPrice: {
        marginTop: 3,
        color: '#888'
    },
    viewAllText: {
        color: 'blue', 
        textAlign: 'right', 
        marginTop: 10,
        marginRight: 15
    },
    doneButton: {
        backgroundColor: '#FF6B6B',
        padding: 15,
        borderRadius: 10,
        marginTop: 20,
        marginHorizontal: 15,
        position: 'absolute',
        bottom: 20,
        left: 15,
        right: 15
    },
    doneButtonText: {
        color: 'white',
        textAlign: 'center',
        fontSize: 16,
        fontWeight: 'bold'
    }
});

export default AddonScreen;