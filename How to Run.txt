2:02 PM 1/20/2025

READ ALL AND PASTE IT IN QUERY AND RUN FOR IMPLEMENTATION ON SUPABASE.
FEEL FOR TO CONTACT IF YOU HAVE ANY ISSUE.

MAKE SURE TO MAKE STORAGE BUCKETS PUBLIC BY CHANGING THEIR POLICIES FOR IMAGES TO ACTUALLY DISPLAY.

1. avatars
2. review-images

---BEST OF LUCK---

-------------------------------------------
-----------UMS MANAGEMENT SYSTEM-----------

-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

-------------------------------------------------
-------------------------------------------------

-----------CREATE USER ADDRESS TABLE-------------
-------------------------------------------------

CREATE TABLE user_addresses (
    address_id SERIAL PRIMARY KEY,            -- Auto-incrementing primary key
    user_id UUID REFERENCES profiles(id),   -- Foreign key referencing Users table
    street TEXT NOT NULL,                     -- Street field
    apartment TEXT,                           -- Apartment field (optional)
    city TEXT NOT NULL,                       -- City field
    state TEXT NOT NULL,                      -- State field
    postal_code TEXT NOT NULL,                -- Postal code field
    type TEXT,                                -- Address type (e.g., home, office)
    nickname TEXT,                            -- Nickname for the address
    delivery_instructions TEXT,               -- Delivery instructions (optional)
    created_at TIMESTAMP DEFAULT NOW()        -- Automatically set timestamp
);

-----------------------------------------------
-----------------------------------------------

------------Review Table Creation--------------
-----------------------------------------------

-- Ensure UUID extension is available in a dedicated schema
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" SCHEMA extensions;

-- Create the profiles table for user information (if it doesn't already exist)
CREATE TABLE IF NOT EXISTS profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username TEXT NOT NULL,
    avatar_url TEXT,
    full_name TEXT
) WITH (OIDS=FALSE);

-- Create the reviews table
CREATE TABLE IF NOT EXISTS reviews (
    id bigint primary key generated always as identity,
    user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    review_text TEXT NOT NULL,
    image_url TEXT,
    rating SMALLINT CHECK (rating >= 1 AND rating <= 5),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    hotel_id TEXT NOT NULL,
    user_name TEXT NOT NULL,
    user_avatar TEXT

) WITH (OIDS=FALSE);

-- Create indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_reviews_user_id ON reviews(user_id);
CREATE INDEX IF NOT EXISTS idx_reviews_created_at ON reviews(created_at);
CREATE INDEX IF NOT EXISTS idx_reviews_rating ON reviews(rating);

-- Enable Row Level Security
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;

-- Policies for reviews table
-- Allow users to view their own reviews
CREATE POLICY "Users can view their own reviews" 
ON reviews FOR SELECT 
USING ((SELECT auth.uid()) = user_id);

-- Allow users to insert their own reviews
CREATE POLICY "Users can insert their own reviews" 
ON reviews FOR INSERT 
WITH CHECK ((SELECT auth.uid()) = user_id);

-- Allow users to update their own reviews
CREATE POLICY "Users can update their own reviews" 
ON reviews FOR UPDATE 
USING ((SELECT auth.uid()) = user_id);

-- Allow users to delete their own reviews
CREATE POLICY "Users can delete their own reviews" 
ON reviews FOR DELETE 
USING ((SELECT auth.uid()) = user_id);

-- Create storage bucket for review images
INSERT INTO storage.buckets (id, name)
VALUES ('review-images', 'review-images')
ON CONFLICT (id) DO NOTHING;

-- Storage policies for review images
CREATE POLICY "Users can upload review images to their own folder"
ON storage.objects 
FOR INSERT 
TO authenticated
WITH CHECK (
    bucket_id = 'review-images' AND
    (storage.foldername(name))[1] = 'review' AND
    (storage.foldername(name))[2] = (SELECT auth.uid()::text)
);

CREATE POLICY "Users can read their own review images"
ON storage.objects 
FOR SELECT 
TO authenticated
USING (
    bucket_id = 'review-images' AND
    (storage.foldername(name))[1] = 'review' AND
    (storage.foldername(name))[2] = (SELECT auth.uid()::text)
);

CREATE POLICY "Public can view review images"
ON storage.objects 
FOR SELECT 
USING (bucket_id = 'review-images');

----------------------------------------------
----------------------------------------------

----------------FAQ ITEM TABLE----------------
----------------------------------------------

-- Create the faq_items table
CREATE TABLE faq_items not exists (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  content TEXT NOT NULL
);

-- Insert the FAQ items
INSERT INTO faq_items (title, content) VALUES
  ('How to Order', 'Browse restaurants, select your items, customize your order, and checkout. You can add items to cart, modify quantities, and choose delivery or pickup options.'),
  ('Tracking Your Order', 'Once your order is placed, you can track its status in real-time. Statuses include: Preparing, Out for Delivery, and Delivered. You will receive notifications at each stage.'),
  ('Payment Methods', 'We accept credit cards, debit cards, Apple Pay, Google Pay, and PayPal. You can save multiple payment methods in your account for quick checkout.'),
  ('Dietary Restrictions', 'Easily filter restaurants and menu items based on dietary needs like vegetarian, vegan, gluten-free, and more. Each restaurant provides detailed ingredient information.'),
  ('Cancellation & Refunds', 'You can cancel an order within 5 minutes of placing it. After that, contact customer support. Refunds are processed within 3-5 business days to your original payment method.');

-----------------------------------------------
-----------------------------------------------


--------------Cart and Cart_addons-------------
-----------------------------------------------

-- Cart Items Table
CREATE TABLE cart_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    hotel_id TEXT NOT NULL,
    item_name TEXT NOT NULL,
    price NUMERIC(10,2) NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Addons Table
CREATE TABLE cart_item_addons (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cart_item_id UUID REFERENCES cart_items(id) ON DELETE CASCADE NOT NULL,
    addon_name TEXT NOT NULL,
    addon_price NUMERIC(10,2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_cart_items_user_id ON cart_items(user_id);
CREATE INDEX idx_cart_item_addons_cart_item_id ON cart_item_addons(cart_item_id);

-- Row Level Security for cart_items
ALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own cart items" ON cart_items
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own cart items" ON cart_items
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own cart items" ON cart_items
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own cart items" ON cart_items
    FOR DELETE USING (auth.uid() = user_id);

-- Row Level Security for cart_item_addons
ALTER TABLE cart_item_addons ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view addons for their cart items" ON cart_item_addons
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM cart_items 
            WHERE cart_items.id = cart_item_addons.cart_item_id 
            AND cart_items.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can insert addons for their cart items" ON cart_item_addons
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM cart_items 
            WHERE cart_items.id = cart_item_id 
            AND cart_items.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can delete addons for their cart items" ON cart_item_addons
    FOR DELETE USING (
        EXISTS (
            SELECT 1 FROM cart_items 
            WHERE cart_items.id = cart_item_addons.cart_item_id 
            AND cart_items.user_id = auth.uid()
        )
    );

-- Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_cart_items_modtime
    BEFORE UPDATE ON cart_items
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

-----------------------------------------------
-----------------------------------------------

----------------Delete User ID-----------------
------------------Function---------------------

-- Step 1: Identify tables referencing auth.users
-- This query will list all tables with foreign keys to auth.users
SELECT
    tc.table_schema, 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_schema AS foreign_table_schema,
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name 
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu
      ON tc.constraint_name = kcu.constraint_name
      AND tc.table_schema = kcu.table_schema
    JOIN information_schema.constraint_column_usage AS ccu
      ON ccu.constraint_name = tc.constraint_name
      AND ccu.table_schema = tc.table_schema
WHERE ccu.table_name = 'users'
  AND ccu.table_schema = 'auth'
  AND tc.constraint_type = 'FOREIGN KEY';

-- Step 2: Update foreign key constraints to add ON DELETE CASCADE
-- Replace 'public' with the actual schema name if different
-- Replace 'table_name' and 'column_name' with the actual values from Step 1

-- Update profiles table
ALTER TABLE public.profiles
DROP CONSTRAINT profiles_id_fkey,
ADD CONSTRAINT profiles_id_fkey
    FOREIGN KEY (id)
    REFERENCES auth.users(id)
    ON DELETE CASCADE;

-- Update user_addresses table
ALTER TABLE public.user_addresses
DROP CONSTRAINT user_addresses_user_id_fkey,
ADD CONSTRAINT user_addresses_user_id_fkey
    FOREIGN KEY (user_id)
    REFERENCES auth.users(id)
    ON DELETE CASCADE;

-- Update cart_items table
ALTER TABLE public.cart_items
DROP CONSTRAINT cart_items_user_id_fkey,
ADD CONSTRAINT cart_items_user_id_fkey
    FOREIGN KEY (user_id)
    REFERENCES auth.users(id)
    ON DELETE CASCADE;

-- Add more ALTER TABLE statements for other tables referencing auth.users

-- Step 3: Update the delete_user function to remove explicit deletions
CREATE OR REPLACE FUNCTION public.delete_user()
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  user_id uuid;
BEGIN
  -- Get the user ID of the authenticated user
  user_id := auth.uid();
  
  -- Delete the user from auth.users
  -- This will trigger cascading deletes for all related records
  DELETE FROM auth.users WHERE id = user_id;
  
  RETURN json_build_object('success', true);
EXCEPTION
  WHEN OTHERS THEN
    RETURN json_build_object('success', false, 'error', SQLERRM);
END;
$$;

------------------------------------------------
------------------------------------------------


-------------Order Instructions-----------------
------------------------------------------------

-- Create the order_instructions table if it doesn't exist
CREATE TABLE IF NOT EXISTS order_instructions (
    id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    instructions JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

-- Add an index on the user_id column for faster queries
CREATE INDEX IF NOT EXISTS idx_order_instructions_user_id ON order_instructions(user_id);

-- Grant necessary permissions (adjust as needed based on your Supabase setup)
ALTER TABLE order_instructions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can insert their own order instructions"
ON order_instructions FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own order instructions"
ON order_instructions FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- If you need to add the column to an existing table, use this command:
-- ALTER TABLE order_instructions ADD COLUMN IF NOT EXISTS instructions JSONB;

----------------------------------------------
----------------------------------------------





